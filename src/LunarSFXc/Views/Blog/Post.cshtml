@model LunarSFXc.ViewModels.PostViewModel

@{
    Layout = "_BlogLayout";
}

@{
    ViewBag.Title = Model.Title;
    ViewBag.Description = Model.Meta;
}
<section id="blog-post">
    <div class="container">
        <div class="row">

            <!-- Blog Post Content Column -->
            <div class="col-lg-8">

                <!-- Blog Post -->
                <!-- Title -->
                <h2>@Model.Title</h2>

                <!-- Author -->
                <p class="lead">
                    by @Model.PostedBy?.UserName
                </p>
                <p>
                    <span>Posted on @Model.PostedOn.ToString("d")</span>
                </p>

                <hr />

                <!-- Category -->
                <category for-category="Model.Category"></category>

                <div class="pull-right">
                    <!-- Tags -->
                    <tags tags for-tags="Model.Tags"></tags>
                </div>

                <!-- Date/Time -->
                <hr />

                <!-- Preview Image -->
                @if (!Model.Images.Any())
                {
                    <img class="img-responsive" src="http://placehold.it/900x300" alt="" />
                }
                else
                {
                    <img class="img-responsive" src="@Model.Images.FirstOrDefault()?.ImageUri" alt="@Model.Images.FirstOrDefault()?.FileName"/>
                }

                <hr />

                <!-- Post Content -->
                <div>@Html.Raw(@Model.Description)</div>

                <hr />

                @if (User.Identity.IsAuthenticated)
                {
                    <!-- Blog Comments-->
                    <!-- Comments Form -->
                    <div class="well">
                        @Component.InvokeAsync("CommentForm", new { user = User.Identity.Name, parentPost = Model }).Result
                    </div>
                }
                else
                {
                    <p>Please <a asp-controller="Auth" asp-action="Login" asp-route-returnUrl="@Context.Request.Path">sign in</a> to leave comments</p>

                }


                <hr />

                @if (Model.Comments.Any())
                {
                    <div id="commentsWell" class="well">@Html.Partial("_Comments", Model.Comments)</div>


                    <div id="commentModal" class="modal fade bs-example-modal-sm" tabindex="-1" role="dialog" aria-labelledby="myCommentModalLabel">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                    <h4 class="modal-title">Reply To Message</h4>
                                </div>
                                <div class="modal-body">
                                    <div class="text-info text-center">"<span id="commentContent"></span>"</div>
                                    <hr />
                                    @Component.InvokeAsync("CommentForm", new { user = User.Identity.Name, parentCommentId = 0 }).Result
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="editCommentModal" class="modal fade bs-example-modal-sm" tabindex="-1" role="dialog" aria-labelledby="myEditCommentModalLabel">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                    <h4 class="modal-title">Edit/Delete Comment</h4>
                                </div>
                                <div class="modal-body">
                                    @Component.InvokeAsync("CommentForm", new { user = User.Identity.Name, isEdit = true }).Result
                                </div>
                            </div>
                        </div>
                    </div>

                }
                else
                {
                    <div id="commentsWell" class="well">No comments here? :-)</div>
                }
            </div>

            <!-- Blog Sidebar Widgets Column -->
            <div class="col-lg-4">

                <!-- Blog Categories Well -->
                <div class="well">
                    @Component.InvokeAsync("Widget", new { sidebar = true }).Result
                </div>


                <!-- Side Widget Well -->
                <div class="well text-center">
                    <h5>Tweets</h5>
                    <div class="row">
                        <a class="twitter-timeline"
                           data-width="auto"
                           data-dnt="true"
                           data-tweet-limit="3"
                           data-theme="light"
                           data-link-color="#FAB81E"
                           href="https://twitter.com/t41wo"></a>
                    </div>
                    <div class="row">
                        <a href="https://twitter.com/T41WO"
                           class="twitter-follow-button"
                           data-size="large"
                           data-dnt="true"
                           data-show-count="false"></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section scripts {
    <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

    <script>
        $(".formErrorAlert").hide();
        $(".formSuccessAlert").hide();

        success = function (data) {
            $("#commentForm")[0].reset();
            $("#commentForm .formSuccessAlert").alert();
            $("#commentForm .formSuccessAlert").fadeTo(2000, 500).slideUp(500, function () {
                $("#commentForm .formSuccessAlert").slideUp(500);
            });

            setTimeout(location.reload(), 6000);
        };

        failure = function (error) {
            //console.log(error);

            $("#commentForm .formErrorAlert").alert();
            $("#commentForm .formErrorAlert").fadeTo(2000, 500).slideUp(500, function () {
                $("#commentForm .formErrorAlert").slideUp(500);
            });
        };

        success2 = function (data) {
            $("#commentReplyForm")[0].reset();
            $("#commentReplyForm .formSuccessAlert").alert();
            $("#commentReplyForm .formSuccessAlert").fadeTo(2000, 500).slideUp(500, function () {
                $("#commentReplyForm .formSuccessAlert").slideUp(500);
            });

            setTimeout(location.reload(), 6000);
        };

        failure2 = function (error) {
            //console.log(error);

            $("#commentReplyForm .formErrorAlert").alert();
            $("#commentReplyForm .formErrorAlert").fadeTo(2000, 500).slideUp(500, function () {
                $("#commentReplyForm .formErrorAlert").slideUp(500);
            });
        };

        success3 = function (data) {
            $("#commentEditForm")[0].reset();
            $("#commentEditForm .formSuccessAlert").alert();
            $("#commentEditForm .formSuccessAlert").fadeTo(2000, 500).slideUp(500, function () {
                $("#commentEditForm .formSuccessAlert").slideUp(500);
            });

            setTimeout(location.reload(), 6000);
        };

        failure3 = function (error) {
            //console.log(error);

            $("#commentEditForm .formErrorAlert").alert();
            $("#commentEditForm .formErrorAlert").fadeTo(2000, 500).slideUp(500, function () {
                $("#commentEditForm .formErrorAlert").slideUp(500);
            });
        };

        $('#commentModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget) // Button that triggered the modal
            var recipient = button.data('whatever') // Extract info from data-* attributes
            // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
            // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.

            var modal = $(this)
            //modal.find('.modal-title').text('reply message to comment ' + recipient)
            modal.find('.modal-body #ParentCommentId').val(recipient)

            $.get("/Comment/GetComment", { id: recipient }, function (data) {
                modal.find('.modal-body #commentContent').html(data);
            });
        })

        $('#editCommentModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget) // Button that triggered the modal
            var recipient = button.data('whatever') // Extract info from data-* attributes
            // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
            // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.

            var modal = $(this)
            //modal.find('.modal-title').text('reply message to comment ' + recipient)
            modal.find('.modal-body #CommentId').val(recipient)

            $.get("/Comment/GetComment", { id: recipient }, function (data) {
                modal.find('.modal-body #editCommentContent').html(data);
            });
        })

        deleteComment = function (data) {

            $.post("/Comment/DeleteComment", { id: data.value }, function (data) {
                success3(data);
                //console.log(data);
            });
        };



    </script>
}
